<?php

/**
 * Controller for processing auctions (add, edit, expire, archive, etc)
 *
 * @todo 	Move bid related processing actions to the history controller,
 * 			reserve this class for only auction related processing
 *
 * @package 		XenAuction
 * @author 			Nathan Rijksen <nathan@naatan.com>
 * @copyright		2012 Naatan.com
 */
class XenAuction_ControllerPublic_Process extends XenForo_ControllerPublic_Abstract
{

	/**
	 * Create a new auction
	 *
	 * Shows the form to create the new auction
	 * 
	 * @return XenAuction_ViewPublic_Auction_Create    auction_create
	 */
	public function actionCreate()
	{
		$tagModel = XenForo_Model::create('XenAuction_Model_Tag');
		return $this->responseView('XenAuction_ViewPublic_Auction_Create', 'auction_create', array(
			'allTags'	=> $tagModel->getTags()
		));
	}
	
	/**
	 * Process the new auction, called from the form that is generated by self::actionCreate
	 *
	 * REQUEST params:
	 *
	 *  - title
	 *  - tags
	 *  - message_html
	 *  - expires			Unix timestamp
	 *  - batch				How many copies to create
	 *  - starting_bid		If empty bids will be disabled
	 *  - buyout			If empty buyouts will be disabled
	 *  - availability		How many items are available
	 *  - bid_enable
	 *  - buyout_enable
	 * 
	 * @return parent::responseRedirect    Redirects to auction list
	 */
	public function actionAdd()
	{
		// Prepare visitor object 
		$visitor 	= XenForo_Visitor::getInstance();
		
		// Process uploaded image (if any)
		$upload  	= XenForo_Upload::getUploadedFile('image');
		$imagePath 	= $upload ? XenAuction_DataWriter_Helper_Auction::saveImage($upload) : NULL;
		
		// Parse user input
		$input = $this->_input->filter(array(
			'title'        		=> XenForo_Input::STRING,
			'tags'         		=> XenForo_Input::ARRAY_SIMPLE,
			'message_html' 		=> XenForo_Input::STRING,
			'expires'      		=> XenForo_Input::UINT,
			'batch'      		=> XenForo_Input::UINT,
			'starting_bid' 		=> XenForo_Input::UINT,
			'buyout'       		=> XenForo_Input::UINT,
			'availability' 		=> XenForo_Input::UINT,
			'bid_enable'   		=> XenForo_Input::UINT,
			'buyout_enable'		=> XenForo_Input::UINT
		));
		
		// Force proper value for batch input
		$batch = is_numeric($input['batch']) ? $input['batch'] : 1;
		if ($batch < 1)
		{
			$batch = 1;
		}
		
		// Prepare data to be written
		$data = array(
			'user_id'			=> $visitor->user_id,
			'title'          	=> $input['title'],
			'image'				=> $imagePath,
			'expiration_date'	=> time() + ((int) $input['expires'] * 86400)
		);
		
		// Set optional values
		if ($input['bid_enable'])
		{
			$data['min_bid'] 		= $input['starting_bid'];
		}
		
		if ($input['buyout_enable'])
		{
			$data['buy_now'] 		= $input['buyout'];
			$data['availability'] 	= $input['availability'];
		}
		
		// Parse the message / description (convert to bbcode)
		$data['message'] = $this->getHelper('Editor')->getMessageText('message', $this->_input);
		$data['message'] = XenForo_Helper_String::autoLinkBbCode($data['message']);
		
		// Prepare tags to be added to auction
		$tagModel 	= XenForo_Model::create('XenAuction_Model_Tag');
		$tags 		= array_unique(array_filter($input['tags']));
		
		// Loop as many times as defined with the batch input, to create multiple auctions with the same values
		for ($c=0;$c<$batch; $c++)
		{
			// Prepare datawriter
			$dw = XenForo_DataWriter::create('XenAuction_DataWriter_Auction');
			$dw->bulkSet($data);
			
			// Validate data before writing to DB
			$dw->preSave();
			if ($dwErrors = $dw->getErrors())
			{
				return $this->responseError($dwErrors);
			}
			
			// Write auction to database
			$dw->save();
			
			// Retrieve written auction data
			$auction = $dw->getMergedData();
			
			// Add tags to auction
			$tagModel->addTagToAuction($tags, $auction['auction_id']);
		}
		
		// All done
		return $this->responseRedirect(
			XenForo_ControllerResponse_Redirect::SUCCESS,
			XenForo_Link::buildPublicLink('auctions')
		);
	}
	
	/**
	 * Edit an auction
	 *
	 * Shows the form to edit an auction
	 *
	 * REQUEST params:
	 *
	 *  - id
	 * 
	 * @return XenAuction_ViewPublic_Auction_Create    auction_edit
	 */
	public function actionEdit()
	{
		// Prepare visitor object & parse user input
		$visitor 		= XenForo_Visitor::getInstance();
		$auctionId 	 	= $this->_input->filterSingle('id', XenForo_Input::UINT);
		
		// Prepare database models
		$auctionModel 	= XenForo_Model::create('XenAuction_Model_Auction');
		$tagModel 		= XenForo_Model::create('XenAuction_Model_Tag');
		
		// Retrieve auction that is to be edited
		$auction 		= $auctionModel->getAuctionById($auctionId);
		
		// Validate that the user has permission to edit this auction
		if (
			! $visitor->hasPermission('auctions', 'editOthersAuctions') AND
			(
				$auction['user_id'] == $visitor->user_id AND
				! $visitor->hasPermission('auctions', 'editOwnAuctions')
			)
		)
		{
			return $this->responseNoPermission();
		}
		
		// All done
		return $this->responseView('XenAuction_ViewPublic_Auction_Create', 'auction_edit', array(
			'allTags'	=> $tagModel->getTags(),
			'auction'	=> $auction,
			'tags'		=> $tagModel->getTagsByAuction($auctionId)
		));
	}
	
	/**
	 * Process the edited auction, called from the form that is generated by self::actionEdit
	 *
	 * REQUEST params:
	 *
	 *  - id
	 *  - title
	 *  - tags
	 *  - message_html
	 * 
	 * @return parent::responseRedirect    Redirects to auction list
	 */
	public function actionSave()
	{
		// Prepare visitor object
		$visitor 		= XenForo_Visitor::getInstance();
		
		// Process uploaded image (if any)
		$upload  		= XenForo_Upload::getUploadedFile('image');
		$imagePath 		= $upload ? XenAuction_DataWriter_Helper_Auction::saveImage($upload) : false;
		
		// Retrieve auction id from user input
		$auctionId 	 	= $this->_input->filterSingle('id', XenForo_Input::UINT);
		
		// Retrieve auction that is to be updated
		$auctionModel 	= XenForo_Model::create('XenAuction_Model_Auction');
		$auction 		= $auctionModel->getAuctionById($auctionId);
		
		// Validate that the visitor has permission to edit this auction
		if (
			! $visitor->hasPermission('auctions', 'editOthersAuctions') AND
			(
				$auction['user_id'] == $visitor->user_id AND
				! $visitor->hasPermission('auctions', 'editOwnAuctions')
			)
		)
		{
			return $this->responseNoPermission();
		}
		
		// Parse user input
		$input = $this->_input->filter(array(
			'title'        		=> XenForo_Input::STRING,
			'tags'         		=> XenForo_Input::ARRAY_SIMPLE,
			'message_html' 		=> XenForo_Input::STRING,
		));
		
		// Prepare data that is to be written
		$data = array();
		$data['title'] = $input['title'];
		$data['message'] = $this->getHelper('Editor')->getMessageText('message', $this->_input);
		$data['message'] = XenForo_Helper_String::autoLinkBbCode($data['message']);
		
		// Set new image if one was uploaded
		if ($imagePath)
		{
			$data['image'] = $imagePath;
		}
		
		// Prepare new tags
		$tags 		= array_unique(array_filter($input['tags']));
		$tagModel 	= XenForo_Model::create('XenAuction_Model_Tag');
		
		// Delete tags and add new tags
		$tagModel->deleteTagsFromAuction($auctionId);
		$tagModel->addTagToAuction($tags, $auctionId);
		
		// Prepare datawriter
		$dw = XenForo_DataWriter::create('XenAuction_DataWriter_Auction');
		$dw->setExistingData($auction);
		$dw->bulkSet($data);
		
		// Validate data before writing to DB
		$dw->preSave();
		if ($dwErrors = $dw->getErrors())
		{
			return $this->responseError($dwErrors);
		}
		
		// Update auction
		$dw->save();
		
		// All done
		return $this->responseRedirect(
			XenForo_ControllerResponse_Redirect::SUCCESS,
			XenForo_Link::buildPublicLink('auctions')
		);
	}
	
	/**
	 * Archive an auction, this effectively just moves them to the "archived" tab on the history page
	 *
	 * REQUEST params:
	 *
	 *  - id
	 * 
	 * @return parent::responseRedirect    Redirects to auction history
	 */
	public function actionArchive()
	{
		// Prepare visitor object
		$visitor 	= XenForo_Visitor::getInstance();
		
		// Parse user input
		$auctionId	= $this->_input->filterSingle('id', XenForo_Input::UINT);
		
		// Retrieve auction
		$auctionModel	= XenForo_Model::create('XenAuction_Model_Auction');
		$auction     	= $auctionModel->getAuctionById($auctionId);
		
		// Validate that the visitor is the creator of the auction
		if ($visitor->user_id != $auction['user_id'])
		{
			return $this->responseNoPermission();
		}
		
		// Prepare datawriter
		$dw = XenForo_DataWriter::create('XenAuction_DataWriter_Auction');
		$dw->setExistingData($auction);
		$dw->set('archived', 1);
		
		// Update auction
		$dw->save();
		
		// All done
		return $this->responseRedirect(
			XenForo_ControllerResponse_Redirect::SUCCESS,
			XenForo_Link::buildPublicLink('auction-history')
		);
	}
	
	/**
	 * Expire an auction
	 *
	 * This immediately expires the auction, regardless of what it's expiration date may be
	 * It will still reward the highest bidder
	 *
	 * REQUEST params:
	 *
	 *  - id
	 * 
	 * @return parent::responseRedirect    Redirects to auction list
	 */
	public function actionExpire()
	{
		// Prepare visitor object
		$visitor 		= XenForo_Visitor::getInstance();
		
		// Parse user input
		$auctionId 	 	= $this->_input->filterSingle('id', XenForo_Input::UINT);
		
		// Retrieve auction data
		$auctionModel 	= XenForo_Model::create('XenAuction_Model_Auction');
		$auction 		= $auctionModel->getAuctionById($auctionId);
		
		// Validate that the visitor has permission to expire this auction
		if (
			! $visitor->hasPermission('auctions', 'expireOthersAuctions') AND
			(
				$auction['user_id'] == $visitor->user_id AND
				! $visitor->hasPermission('auctions', 'expireOwnAuctions')
			)
		)
		{
			return $this->responseNoPermission();
		}
		
		// Expire the auction
		XenAuction_CronEntry_Auction::runExpireAuction($auction);
		
		// All done
		return $this->responseRedirect(
			XenForo_ControllerResponse_Redirect::SUCCESS,
			XenForo_Link::buildPublicLink('auctions')
		);
	}
	
	/**
	 * Mark an auction as complete
	 *
	 * This will show a form to allow the auctioneer to type a message to the purchaser
	 * It will be pre-filled with the auction confirm message users can configure in
	 * their profile preferences
	 *
	 * REQUEST params:
	 *
	 *  - id
	 * 
	 * @return XenForo_ViewPublic_Base    Template auction_complete
	 */
	public function actionComplete()
	{
		// Prepare visitor object
		$visitor 		= XenForo_Visitor::getInstance();
		
		// Parse user input
		$id 			= $this->_input->filterSingle('id', XenForo_Input::UINT);
		
		// Set fetch options and conditions
		$fetchOptions	= array('join'	 => XenAuction_Model_Auction::FETCH_BID);
		$fetchConditions= array('bid_id' => $id);
		
		// Retrieve auction data
		$auctionModel	= XenForo_Model::create('XenAuction_Model_Auction');
		$auction     	= $auctionModel->getAuctions($fetchConditions, $fetchOptions);
		
		// Validate auction data
		if ( ! $auction)
		{
			return $this->responseError(new XenForo_Phrase('sale_not_found'), 404);
		}
		
		// Get the first auction in the array (since getAuctions can return multiple auctions, but
		// given the fact that we queried on a unique field it will always only have one result)
		$auction = current($auction);
		
		// Prepare default confirmation message
		$message = isset($visitor->customFields['auctionConfirmMessage']) ? $visitor->customFields['auctionConfirmMessage'] : '';
		
		// Get user profile for purchaser
		$userModel 		= XenForo_Model::create('XenForo_Model_User');
		$user 			= $userModel->getUserById($auction['bid_user_id']);
		
		if ( ! empty($message)) // if a default message is defined we'll need to parse it 
		{
			// Prepare variables
			$vars 			= array_merge($auction, $user);
			$vars['link'] 	= XenForo_Link::buildPublicLink('auctions/details', '', array('id' => $auction['auction_id']));
			
			// Parse message
			$message 		= @preg_replace('|\{([a-z]*?)\}|e', '"".$vars["$1"].""', $message);
		}
		
		// All done
		return $this->responseView('XenForo_ViewPublic_Base', 'auction_complete', array(
			'user'		=> $user,
			'auction'	=> $auction,
			'message'	=> $message
		));	
	}
	
	/**
	 * Mark an auction as complete
	 *
	 * Called from the form rendered by self::actionComplete
	 *
	 * REQUEST params:
	 *
	 *  - id
	 *  - message
	 * 
	 * @return parent::responseRedirect    Redirects to auction history
	 */
	public function actionMarkComplete()
	{
		// Prepare visitor object
		$visitor 		= XenForo_Visitor::getInstance();
		
		// Parse user input
		$input = $this->_input->filter(array(
			'id' 		=> XenForo_Input::UINT,
			'message' 	=> XenForo_Input::STRING
		));
		
		// Set fetch conditions and fetch options
		$fetchOptions	= array('join'	 => array(XenAuction_Model_Auction::FETCH_BID));
		$fetchConditions= array('bid_id' => $input['id']);
		
		// Retrieve auction data
		$auctionModel	= XenForo_Model::create('XenAuction_Model_Auction');
		$auction     	= $auctionModel->getAuctions($fetchConditions, $fetchOptions);
		
		// Validate auction data
		if ( ! $auction)
		{
			return $this->responseError(new XenForo_Phrase('sale_not_found'), 404);
		}
		
		// Get the first auction in the array (since getAuctions can return multiple auctions, but
		// given the fact that we queried on a unique field it will always only have one result)
		$auction = current($auction);
		
		// Validate that the visitor is the creator of the auction
		if ($visitor->user_id != $auction['user_id'])
		{
			return $this->responseNoPermission();
		}
		
		// Prepare datawriter
		$dw = XenForo_DataWriter::create('XenAuction_DataWriter_Bid');
		$dw->setExistingData($auction);
		$dw->set('completed', 1);
		
		// Update bid (transaction)
		$dw->save();
		
		// If a message was given, notify the purchaser with the given message
		if ( ! empty($input['message']))
		{
			$title = new XenForo_Phrase('sale_x_completed', $auction);
			XenAuction_Helper_Notification::sendNotification($auction['bid_user_id'], $title, $input['message']);
		}
		
		// All done
		return $this->responseRedirect(
			XenForo_ControllerResponse_Redirect::SUCCESS,
			XenForo_Link::buildPublicLink('auction-history') . '#_sales'
		);
	}
	
	/**
	 * Session activity details.
	 * 
	 * @see XenForo_Controller::getSessionActivityDetailsForList()
	 */
	public static function getSessionActivityDetailsForList(array $activities)
	{
		return new XenForo_Phrase('creating_auctions');
	}
	
	/**
	 * Enforce permissions that are applicable to all actions in this controller
	 *
	 * @see library/XenForo/XenForo_Controller#_preDispatch($action)
	 */
	protected function _preDispatch($action)
	{
		if (
			! XenForo_Visitor::getInstance()->hasPermission('auctions', 'viewAuctions') OR
			! XenForo_Visitor::getInstance()->hasPermission('auctions', 'createAuctions')
		)
		{
			throw new XenForo_ControllerResponse_Exception($this->responseNoPermission());
		}
	}
	
}